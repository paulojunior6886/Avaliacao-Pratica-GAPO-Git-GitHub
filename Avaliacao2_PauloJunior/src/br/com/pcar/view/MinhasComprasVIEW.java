/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package br.com.pcar.view;

import br.com.pcar.ctr.ClienteCTR; 
import br.com.pcar.ctr.VendaCTR;
import br.com.pcar.dto.UsuarioDTO; 
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat; 
import java.util.Date;

public class MinhasComprasVIEW extends javax.swing.JDialog {

    private UsuarioDTO clienteLogadoDTO;
    private int idClienteParaConsulta = -1; 
    private VendaCTR vendaCTR = new VendaCTR();
    private ClienteCTR clienteCTR = new ClienteCTR(); 
    private DefaultTableModel modeloTabelaMinhasCompras;

    public MinhasComprasVIEW(java.awt.Frame parent, boolean modal, UsuarioDTO clienteLogado) {
        super(parent, modal);
        this.clienteLogadoDTO = clienteLogado;
        
        initComponents(); 
        
        if (clienteLogadoDTO != null && clienteLogadoDTO.getNome_usuario() != null) {
            this.setTitle("Minhas Compras - " + clienteLogadoDTO.getNome_usuario());
        } else {
            this.setTitle("Minhas Compras");
        }
        setLocationRelativeTo(parent);
        
        modeloTabelaMinhasCompras = (DefaultTableModel) tblMinhasCompras.getModel();
        btnCancelarCompraSelecionada.setEnabled(false); 

        obterIdClienteEListarCompras();
    }

    private void obterIdClienteEListarCompras() {
        if (clienteLogadoDTO == null || clienteLogadoDTO.getCpf_usuario() == null || clienteLogadoDTO.getCpf_usuario().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não foi possível identificar o cliente logado (sem CPF).", "Erro de Identificação", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.idClienteParaConsulta = clienteCTR.buscarIdClientePorCPF(clienteLogadoDTO.getCpf_usuario());
        
        if (this.idClienteParaConsulta != -1) {
            carregarMinhasComprasNaTabela();
        } else {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado no cadastro com o CPF: " + clienteLogadoDTO.getCpf_usuario() + "\nNão é possível listar suas compras.", "Erro", JOptionPane.ERROR_MESSAGE);
            modeloTabelaMinhasCompras.setRowCount(0); // Limpa a tabela
        }
    }

    private void carregarMinhasComprasNaTabela() {
        modeloTabelaMinhasCompras.setRowCount(0); 
        if (this.idClienteParaConsulta == -1) {
            return;  
        }

        ResultSet rs = null;
        try {
            rs = vendaCTR.consultarVendasPorCliente(this.idClienteParaConsulta);
            SimpleDateFormat sdfExibicao = new SimpleDateFormat("dd/MM/yyyy");

            if (rs != null) {
                while (rs.next()) {
                    Date dataSQL = rs.getDate("data_venda");
                    String dataFormatada = (dataSQL != null) ? sdfExibicao.format(dataSQL) : "N/A";
                    
                    String veiculoDisplay = rs.getString("marca_veiculo") + " " + 
                                            rs.getString("modelo_veiculo") + 
                                            " (" + rs.getString("placa_veiculo") + ")";
                    
                    modeloTabelaMinhasCompras.addRow(new Object[]{
                        rs.getInt("id"), // ID da Venda
                        veiculoDisplay,
                        dataFormatada,
                        String.format("R$ %,.2f", rs.getDouble("valor_venda")),
                        rs.getString("status_venda")
                    });
                }
            }
        } catch (SQLException e) {
            System.err.println("Erro ao carregar 'Minhas Compras': " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Erro ao carregar seu histórico de compras:\n" + e.getMessage(), "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (rs != null) {
                vendaCTR.CloseDB();
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTituloMinhasCompras = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnCancelarCompraSelecionada = new javax.swing.JButton();
        btnFecharMinhasCompras = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMinhasCompras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Minhas Compras - [Nome do Cliente]");

        lblTituloMinhasCompras.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTituloMinhasCompras.setText("Histórico de Compras");

        btnCancelarCompraSelecionada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/pcar/view/imagens/cancelar_1.png"))); // NOI18N
        btnCancelarCompraSelecionada.setText("Cancelar Compra");
        btnCancelarCompraSelecionada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarCompraSelecionadaActionPerformed(evt);
            }
        });

        btnFecharMinhasCompras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/pcar/view/imagens/sair_1.png"))); // NOI18N
        btnFecharMinhasCompras.setText("Fechar");
        btnFecharMinhasCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharMinhasComprasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnCancelarCompraSelecionada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(btnFecharMinhasCompras))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarCompraSelecionada)
                    .addComponent(btnFecharMinhasCompras)))
        );

        tblMinhasCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Venda", "Veículo", "Data da Compra", "Valor", "Status"
            }
        ));
        tblMinhasCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMinhasComprasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblMinhasCompras);

        jScrollPane2.setViewportView(jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTituloMinhasCompras)
                .addGap(279, 279, 279))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTituloMinhasCompras)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharMinhasComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharMinhasComprasActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharMinhasComprasActionPerformed

    private void btnCancelarCompraSelecionadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarCompraSelecionadaActionPerformed
        int linhaSelecionada = tblMinhasCompras.getSelectedRow();
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma compra na tabela para cancelar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String statusAtual = modeloTabelaMinhasCompras.getValueAt(linhaSelecionada, 4).toString();
        if (!"Pendente".equalsIgnoreCase(statusAtual)) {
            JOptionPane.showMessageDialog(this, "Apenas compras com status 'Pendente' podem ser canceladas.", "Ação Não Permitida", JOptionPane.WARNING_MESSAGE);
            btnCancelarCompraSelecionada.setEnabled(false); // Desabilita se o status mudou ou foi selecionado errado
            return;
        }

        int idVendaParaCancelar = (Integer) modeloTabelaMinhasCompras.getValueAt(linhaSelecionada, 0); 
        String veiculoInfo = modeloTabelaMinhasCompras.getValueAt(linhaSelecionada, 1).toString();

        int confirm = JOptionPane.showConfirmDialog(this, 
                "Deseja realmente cancelar a compra do veículo: " + veiculoInfo + "?\nID da Venda: " + idVendaParaCancelar, 
                "Confirmar Cancelamento", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            String resultado = vendaCTR.cancelarVendaPeloCliente(idVendaParaCancelar);
            JOptionPane.showMessageDialog(this, resultado, "Status do Cancelamento", JOptionPane.INFORMATION_MESSAGE);
            
            if (resultado.toLowerCase().contains("sucesso")) {
                carregarMinhasComprasNaTabela();  
                btnCancelarCompraSelecionada.setEnabled(false);  
                // Opcional: Se o cancelamento liberar o veículo, a CatalogoClienteVIEW precisaria ser atualizada
                // se o MinhasComprasVIEW fosse fechado e o catálogo recarregado.
            }
        }
    }//GEN-LAST:event_btnCancelarCompraSelecionadaActionPerformed

    private void tblMinhasComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMinhasComprasMouseClicked
        int linhaSelecionada = tblMinhasCompras.getSelectedRow();
        if (linhaSelecionada >= 0) {
            String status = modeloTabelaMinhasCompras.getValueAt(linhaSelecionada, 4).toString();  
            if ("Pendente".equalsIgnoreCase(status)) {
                btnCancelarCompraSelecionada.setEnabled(true);
            } else {
                btnCancelarCompraSelecionada.setEnabled(false);
            }
        } else {
            btnCancelarCompraSelecionada.setEnabled(false);
        }
    }//GEN-LAST:event_tblMinhasComprasMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarCompraSelecionada;
    private javax.swing.JButton btnFecharMinhasCompras;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTituloMinhasCompras;
    private javax.swing.JTable tblMinhasCompras;
    // End of variables declaration//GEN-END:variables
}
